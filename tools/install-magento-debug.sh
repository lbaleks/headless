#!/usr/bin/env bash
set -euo pipefail
ROOT="$(pwd)"

pull() { grep -E "^[[:space:]]*$1[[:space:]]*=" "$2" 2>/dev/null | tail -n1 | sed -E 's/^[^=]+=\s*//; s/^["'"'"']?//; s/["'"'"']?$//'; }

echo "→ Oppdager env-verdier"
BASE="$(pull MAGENTO_BASE_URL .env.local || true)"
[ -z "${BASE}" ] && BASE="$(pull M2_BASE_URL .env || true)"
[ -z "${BASE}" ] && BASE="$(pull NEXT_PUBLIC_GATEWAY_BASE .env.local || true)"

TOKEN="$(pull MAGENTO_ADMIN_TOKEN .env.local || true)"
[ -z "${TOKEN}" ] && TOKEN="$(pull M2_ADMIN_TOKEN .env || true)"
[ -z "${TOKEN}" ] && TOKEN="$(pull M2_TOKEN .env.local || true)"

MULT="$(pull PRICE_MULTIPLIER .env.local || true)"
BASIC="$(pull M2_BASIC .env.local || true)"

if [ -n "${BASE:-}" ]; then
  BASE="${BASE%/}"
  case "$BASE" in
    */rest) : ;;
    *) BASE="$BASE/rest" ;;
  esac
fi

echo "→ Skriver .env.local (kanoniske nøkler)"
{
  echo "# Generated by install-magento-debug.sh"
  [ -n "${BASE:-}" ]  && echo "MAGENTO_BASE_URL=$BASE"
  [ -n "${TOKEN:-}" ] && echo "MAGENTO_ADMIN_TOKEN=$TOKEN"
  [ -n "${BASE:-}" ]  && echo "NEXT_PUBLIC_GATEWAY_BASE=$BASE"
  [ -n "${MULT:-}" ]  && echo "PRICE_MULTIPLIER=$MULT"
  [ -n "${BASIC:-}" ] && echo "M2_BASIC=$BASIC"
} > .env.local

echo "→ Oppretter debug-API: /api/_debug/env og /api/_debug/ping"
mkdir -p app/api/_debug/env app/api/_debug/ping

cat > app/api/_debug/env/route.ts <<'TS'
import { NextResponse } from 'next/server'
export const dynamic = 'force-dynamic'
const base = process.env.MAGENTO_BASE_URL || process.env.M2_BASE_URL || process.env.NEXT_PUBLIC_GATEWAY_BASE || ''
const token = process.env.MAGENTO_ADMIN_TOKEN || process.env.M2_ADMIN_TOKEN || process.env.M2_TOKEN || ''
export async function GET() {
  return NextResponse.json({
    ok: Boolean(base && token),
    hasBase: !!base, hasToken: !!token,
    base,
    tokenPrefix: token ? token.slice(0,8)+'…' : null
  })
}
TS

cat > app/api/_debug/ping/route.ts <<'TS'
import { NextResponse } from 'next/server'
export const dynamic = 'force-dynamic'

function getBase() {
  const b = process.env.MAGENTO_BASE_URL || process.env.M2_BASE_URL || process.env.NEXT_PUBLIC_GATEWAY_BASE || ''
  return b.endsWith('/rest') ? b : (b ? b.replace(/\/+$/,'') + '/rest' : '')
}
function getToken() {
  return process.env.MAGENTO_ADMIN_TOKEN || process.env.M2_ADMIN_TOKEN || process.env.M2_TOKEN || ''
}

async function tryFetch(path: string) {
  const base = getBase()
  const token = getToken()
  if (!base || !token) return { ok:false, status:0, url: base? base+'/'+path : path, error: 'missing env' }
  const url = base.replace(/\/+$/,'') + '/' + path.replace(/^\/+/,'')
  try {
    const res = await fetch(url, {
      headers: { Authorization: `Bearer ${token}` },
      cache: 'no-store'
    })
    const text = await res.text()
    let json:any = null
    try { json = JSON.parse(text) } catch { /* ignore */ }
    return { ok: res.ok, status: res.status, url, sample: json ?? (text.slice(0,200) + (text.length>200?'…':'')) }
  } catch (e:any) {
    return { ok:false, status:0, url, error: String(e?.message||e) }
  }
}

export async function GET() {
  const base = getBase()
  const token = getToken()
  const checks = await Promise.all([
    tryFetch('V1/orders?searchCriteria[pageSize]=1'),
    tryFetch('V1/products?searchCriteria[pageSize]=1'),
    tryFetch('V1/customers/search?searchCriteria[pageSize]=1'),
  ])
  return NextResponse.json({
    base, tokenPrefix: token? token.slice(0,8)+'…' : null, checks
  })
}
TS

echo "→ Sikrer src/lib/magento.ts"
mkdir -p src/lib
cat > src/lib/magento.ts <<'TS'
const BASE =
  process.env.MAGENTO_BASE_URL ||
  process.env.M2_BASE_URL ||
  process.env.NEXT_PUBLIC_GATEWAY_BASE

const TOKEN =
  process.env.MAGENTO_ADMIN_TOKEN ||
  process.env.M2_ADMIN_TOKEN ||
  process.env.M2_TOKEN

if (!BASE || !TOKEN) {
  throw new Error('Missing MAGENTO_BASE_URL or MAGENTO_ADMIN_TOKEN in environment')
}

function withSlash(base: string, path: string) {
  const b = base.replace(/\/+$/,'')
  const p = path.replace(/^\/+/, '')
  return `${b}/${p}`
}

async function handle<T>(res: Response, verb: string, path: string): Promise<T> {
  if (!res.ok) {
    const body = await res.text().catch(()=>'')
    throw new Error(`Magento ${verb} ${withSlash(BASE!, path)} failed: ${res.status} ${body || ''}`.trim())
  }
  return (await res.json()) as T
}

export async function mGet<T>(path: string) {
  const res = await fetch(withSlash(BASE!, path), {
    headers: { Authorization: `Bearer ${TOKEN}` },
    cache: 'no-store',
  })
  return handle<T>(res, 'GET', path)
}

export async function mPost<T>(path: string, body: any) {
  const res = await fetch(withSlash(BASE!, path), {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${TOKEN}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(body),
  })
  return handle<T>(res, 'POST', path)
}
TS

echo "→ Lager helper for Magento-curl fra .env(.local): tools/m2.sh"
cat > tools/m2.sh <<'BASH'
#!/usr/bin/env bash
set -euo pipefail
ROOT="$(cd "$(dirname "$0")/.." && pwd)"
pull() { grep -E "^[[:space:]]*$1[[:space:]]*=" "$2" 2>/dev/null | tail -n1 | sed -E 's/^[^=]+=\s*//; s/^["'"'"']?//; s/["'"'"']?$//'; }
BASE="$(pull MAGENTO_BASE_URL "$ROOT/.env.local" || true)"
[ -z "${BASE}" ] && BASE="$(pull M2_BASE_URL "$ROOT/.env" || true)"
[ -z "${BASE}" ] && BASE="$(pull NEXT_PUBLIC_GATEWAY_BASE "$ROOT/.env.local" || true)"
TOKEN="$(pull MAGENTO_ADMIN_TOKEN "$ROOT/.env.local" || true)"
[ -z "${TOKEN}" ] && TOKEN="$(pull M2_ADMIN_TOKEN "$ROOT/.env" || true)"
[ -z "${TOKEN}" ] && TOKEN="$(pull M2_TOKEN "$ROOT/.env.local" || true)"
BASE="${BASE%/}"; [[ "$BASE" != */rest ]] && BASE="$BASE/rest"
if [ $# -lt 1 ]; then
  echo "Usage: tools/m2.sh V1/products?searchCriteria[pageSize]=1" >&2; exit 1
fi
URL="$BASE/$1"
curl -sS -H "Authorization: Bearer $TOKEN" "$URL"
BASH
chmod +x tools/m2.sh

echo "→ Rydder .next-cache"
rm -rf .next .next-cache 2>/dev/null || true

echo "✓ Ferdig."
echo "1) Start dev-server: npm run dev"
echo "2) Test JSON:        curl -s http://localhost:3000/api/_debug/env | jq ."
echo "3) Ping Magento:     curl -s http://localhost:3000/api/_debug/ping | jq ."
echo "4) Manuell test:     tools/m2.sh 'V1/products?searchCriteria[pageSize]=1' | jq ."
