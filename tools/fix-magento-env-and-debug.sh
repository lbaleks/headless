#!/usr/bin/env bash
set -euo pipefail

ROOT="$(pwd)"
ENV_LOCAL="$ROOT/.env.local"

echo "→ Samler og normaliserer miljøvariabler (.env/.env.local)"
pull() { grep -E "^[[:space:]]*$1[[:space:]]*=" "$2" 2>/dev/null | tail -n1 | sed -E 's/^[^=]+=\s*//; s/^["'"'"']?//; s/["'"'"']?$//'; }

BASE="$(pull MAGENTO_BASE_URL .env.local || true)"
[ -z "${BASE}" ] && BASE="$(pull M2_BASE_URL .env || true)"
[ -z "${BASE}" ] && BASE="$(pull NEXT_PUBLIC_GATEWAY_BASE .env.local || true)"

TOKEN="$(pull MAGENTO_ADMIN_TOKEN .env.local || true)"
[ -z "${TOKEN}" ] && TOKEN="$(pull M2_ADMIN_TOKEN .env || true)"
[ -z "${TOKEN}" ] && TOKEN="$(pull M2_TOKEN .env.local || true)"

MULT="$(pull PRICE_MULTIPLIER .env.local || true)"
BASIC="$(pull M2_BASIC .env.local || true)"

# sørg for /rest-suffiks
if [ -n "${BASE:-}" ]; then
  BASE="${BASE%/}"
  case "$BASE" in
    */rest) : ;;
    *) BASE="$BASE/rest" ;;
  esac
fi

echo "→ Skriver .env.local (kanoniske nøkler)"
{
  echo "# Generated by fix-magento-env-and-debug.sh"
  [ -n "${BASE:-}" ]  && echo "MAGENTO_BASE_URL=$BASE"
  [ -n "${TOKEN:-}" ] && echo "MAGENTO_ADMIN_TOKEN=$TOKEN"
  [ -n "${BASE:-}" ]  && echo "NEXT_PUBLIC_GATEWAY_BASE=$BASE"
  [ -n "${MULT:-}" ]  && echo "PRICE_MULTIPLIER=$MULT"
  [ -n "${BASIC:-}" ] && echo "M2_BASIC=$BASIC"
} > "$ENV_LOCAL"

echo "→ Legger inn /api/_debug/env (JSON)"
mkdir -p app/api/_debug/env
cat > app/api/_debug/env/route.ts <<'TS'
import { NextResponse } from 'next/server'
export const dynamic = 'force-dynamic'

function pickBase() {
  return process.env.MAGENTO_BASE_URL
      || process.env.M2_BASE_URL
      || process.env.NEXT_PUBLIC_GATEWAY_BASE
      || ''
}
function pickToken() {
  return process.env.MAGENTO_ADMIN_TOKEN
      || process.env.M2_ADMIN_TOKEN
      || process.env.M2_TOKEN
      || ''
}

export async function GET() {
  const base = pickBase()
  const token = pickToken()
  return NextResponse.json({
    ok: Boolean(base && token),
    hasBase: !!base,
    hasToken: !!token,
    base,
    tokenPrefix: token ? token.slice(0, 8) + '…' : null,
  })
}
TS

echo "→ Sikrer src/lib/magento.ts bruker riktige env-navn"
mkdir -p src/lib
cat > src/lib/magento.ts <<'TS'
const BASE =
  process.env.MAGENTO_BASE_URL ||
  process.env.M2_BASE_URL ||
  process.env.NEXT_PUBLIC_GATEWAY_BASE

const TOKEN =
  process.env.MAGENTO_ADMIN_TOKEN ||
  process.env.M2_ADMIN_TOKEN ||
  process.env.M2_TOKEN

if (!BASE || !TOKEN) {
  throw new Error('Missing MAGENTO_BASE_URL or MAGENTO_ADMIN_TOKEN in environment')
}

function withSlash(base: string, path: string) {
  const b = base.replace(/\/+$/,'')
  const p = path.replace(/^\/+/, '')
  return `${b}/${p}`
}

async function handle<T>(res: Response, verb: string, path: string): Promise<T> {
  if (!res.ok) {
    const body = await res.text().catch(()=>'')
    throw new Error(`Magento ${verb} ${withSlash(BASE!, path)} failed: ${res.status} ${body || ''}`.trim())
  }
  return (await res.json()) as T
}

export async function mGet<T>(path: string) {
  const res = await fetch(withSlash(BASE!, path), {
    headers: { Authorization: `Bearer ${TOKEN}` },
    cache: 'no-store',
  })
  return handle<T>(res, 'GET', path)
}

export async function mPost<T>(path: string, body: any) {
  const res = await fetch(withSlash(BASE!, path), {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${TOKEN}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(body),
  })
  return handle<T>(res, 'POST', path)
}
TS

echo "→ Rydder .next-cache"
rm -rf .next .next-cache 2>/dev/null || true

echo "✓ Ferdig. Start dev-server på nytt:  npm run dev"
echo "→ Test: curl -s http://localhost:3000/api/_debug/env | jq"
