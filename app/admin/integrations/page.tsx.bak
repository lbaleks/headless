'use client'
import { useEffect, useState } from 'react'
import AdminPage from '@/components/AdminPage'

type Provider = { key:string; name:string; status:'connected'|'disconnected'|'disabled'; note?:string; config?:any; lastHealth?:{ok:boolean;ts:string} | null }

function Badge({status}:{status:Provider['status']}){
  const map:any = { connected:'bg-green-100 text-green-700', disconnected:'bg-gray-100 text-gray-700', disabled:'bg-yellow-100 text-yellow-800' }
  const title = status[0].toUpperCase()+status.slice(1)
  return <span className={'text-xs px-2 py-0.5 rounded ' + (map[status]||'bg-gray-100')}>{title}</span>
}

export default function IntegrationsPage(){
  const [items,setItems]=useState<Provider[]>([])
  const [busy,setBusy]=useState(false)
  const [err,setErr]=useState<string|undefined>()
  const [open,setOpen]=useState(false)
  const [form,setForm]=useState<any>({ key:'', name:'', config:{} })
  const [editing,setEditing]=useState<Provider|null>(null)

  const load=async()=>{ setErr(undefined); const r=await fetch('/api/integrations',{cache:'no-store'}); if(!r.ok){setErr(r.statusText);return} const j=await r.json(); setItems(j.providers||[]) }
  useEffect(()=>{ load() },[])

  const startEdit=(p:Provider)=>{ setEditing(p); setForm({key:p.key, name:p.name, config:p.config||{}}); setOpen(true) }
  const startConnect=(p:Provider)=>{ if(p.status==='disabled'){ alert('Tripletex er deaktivert til demo-konto er klar.'); return } startEdit(p) }
  const close=()=>{ setOpen(false); setEditing(null) }

  const save=async()=>{
    setBusy(true)
    try{
      const r=await fetch('/api/integrations',{method: editing?'PUT':'POST', headers:{'content-type':'application/json'}, body: JSON.stringify({
        key: form.key, name: form.name, status:'connected', config: form.config
      })})
      if(!r.ok) throw new Error(await r.text())
      await load(); close()
    }catch(e:any){ alert(e?.message||'Save failed') }
    finally{ setBusy(false) }
  }

  const disconnect=async(p:Provider)=>{
    if(!confirm('Disconnect '+p.name+'?')) return
    setBusy(true)
    try{
      const r=await fetch('/api/integrations',{method:'PUT', headers:{'content-type':'application/json'}, body: JSON.stringify({ key:p.key, status:'disconnected', config:null })})
      if(!r.ok) throw new Error(await r.text()); await load()
    }catch(e:any){ alert(e?.message||'Failed') } finally{ setBusy(false) }
  }

  const health=async(p:Provider)=>{
    const r=await fetch('/api/integrations/health?provider='+encodeURIComponent(p.key))
    const j=await r.json()
    alert(`Health ${p.name}: ${j.ok?'OK':'FAIL'} (${j.latencyMs}ms) @ ${j.ts}`)
  }

  return (
    <AdminPage title="Integrations">
      {err && <div className="p-3 border border-red-300 text-red-700 rounded mb-3">Error: {err}</div>}
      <div className="rounded-2xl border overflow-hidden">
        <table className="min-w-full text-sm">
          <thead className="bg-gray-50">
            <tr><th className="p-3 text-left">Integration</th><th className="p-3 text-left">Status</th><th className="p-3 text-left">Note</th><th className="p-3 text-right">Actions</th></tr>
          </thead>
          <tbody>
            {items.map(p=>(
              <tr key={p.key} className="odd:bg-white even:bg-gray-50">
                <td className="p-3 border-t">
                  <div className="font-medium">{p.name}</div>
                  <div className="text-xs text-gray-500 font-mono">{p.key}</div>
                </td>
                <td className="p-3 border-t"><Badge status={p.status}/></td>
                <td className="p-3 border-t text-gray-600">{p.note||'â€”'}</td>
                <td className="p-3 border-t text-right space-x-2">
                  <button className="px-2 py-1 border rounded" onClick={()=>health(p)}>Health</button>
                  {p.status!=='connected' && <button className="px-2 py-1 border rounded bg-black text-white" onClick={()=>startConnect(p)} disabled={p.status==='disabled'}>{p.status==='disabled'?'Disabled':'Connect'}</button>}
                  {p.status==='connected' && <button className="px-2 py-1 border rounded" onClick={()=>startEdit(p)}>Edit</button>}
                  {p.status==='connected' && <button className="px-2 py-1 border rounded text-red-600" onClick={()=>disconnect(p)}>Disconnect</button>}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Modal */}
      {open && (
        <div className="fixed inset-0 bg-black/40 grid place-items-center z-50" onClick={close}>
          <div className="bg-white rounded-2xl p-4 w-[min(720px,92vw)]" onClick={e=>e.stopPropagation()}>
            <h2 className="text-xl font-semibold mb-3">{editing?'Edit':'Connect'} {form.name||form.key}</h2>
            <div className="grid grid-cols-2 gap-3">
              <label className="text-sm">Key<input className="mt-1 w-full border rounded p-2" value={form.key} onChange={e=>setForm((f:any)=>({...f,key:e.target.value}))} disabled/></label>
              <label className="text-sm">Name<input className="mt-1 w-full border rounded p-2" value={form.name} onChange={e=>setForm((f:any)=>({...f,name:e.target.value}))} /></label>
              <label className="text-sm col-span-2">Config (JSON)
                <textarea className="mt-1 w-full border rounded p-2 font-mono h-40" value={JSON.stringify(form.config??{},null,2)} onChange={e=>{try{setForm((f:any)=>({...f,config:JSON.parse(e.target.value)}))}catch{}}} />
              </label>
            </div>
            <div className="mt-4 flex justify-end gap-2">
              <button className="px-3 py-1.5 border rounded" onClick={close}>Cancel</button>
              <button className="px-3 py-1.5 border rounded bg-black text-white" onClick={save}>Save</button>
            </div>
          </div>
        </div>
      )}
    </AdminPage>
  )
}
