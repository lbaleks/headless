'use client'

import React, { useEffect, useMemo, useState } from 'react'
import { apiCreateOrder } from '@/lib/orders'
import { AdminPage } from '@/components/AdminPage'
import ProductSearch from '@/components/ProductSearch'

type Product = {
  id: string
  title: string
  sku?: string
  price?: number
  stock?: number
}

type Line = {
  id: string
  title: string
  sku?: string
  price: number
  qty: number
  stock?: number
}

type Customer = {
  name: string
  email?: string
}

function formatCurrency(n: number) {
  if (!isFinite(n)) return '0'
  try {
    return new Intl.NumberFormat('nb-NO', { style: 'currency', currency: 'NOK', maximumFractionDigits: 0 }).format(n)
  } catch {
    return `${Math.round(n)} kr`
  }
}

// ————————————————————————————————
// API ADAPTERE
// Justér disse tre hvis ditt API har andre feltnavn/format
// ————————————————————————————————
function mapProduct(p: any): Product {
  return {
    id: String(p.id ?? p._id ?? p.uuid),
    title: String(p.title ?? p.name ?? p.productName ?? 'Uten navn'),
    sku: p.sku ?? p.SKU ?? p.variant?.sku,
    price: Number(p.price ?? p.unitPrice ?? p.pris ?? 0),
    stock: p.stock ?? p.onHand ?? p.inventory?.available ?? undefined,
  }
}

async function searchProducts(query: string): Promise<Product[]> {
  const url = `/api/products?q=${encodeURIComponent(query)}`
  const res = await fetch(url, { cache: 'no-store' })
  if (!res.ok) throw new Error(`HTTP ${res.status}`)
  const data = await res.json()
  const arr = Array.isArray(data) ? data : (Array.isArray(data?.items) ? data.items : [])
  return arr.map(mapProduct)
}

async function apiCreateOrder(payload: {
  customer: Customer
  lines: Line[]
  notes?: string
}) {
  const res = await fetch('/api/orders', {
    method: 'POST',
    headers: { 'content-type': 'application/json' },
    body: JSON.stringify({
      customer: payload.customer,
      lines: payload.lines.map(l => ({
        productId: l.id,
        title: l.title,
        sku: l.sku,
        qty: l.qty,
        unitPrice: l.price
      })),
      notes: payload.notes ?? ''
    })
  })
  if (!res.ok) throw new Error(`HTTP ${res.status}`)
  return await res.json()
}

// ————————————————————————————————
// UI
// ————————————————————————————————
export default function OrderCreate() {
  const [customer, setCustomer] = useState<Customer>({ name: '' })
  const [lines, setLines] = useState<Line[]>([])
  const [notes, setNotes] = useState('')
  const [busy, setBusy] = useState(false)
  const [searchError, setSearchError] = useState<string | null>(null)

  const total = useMemo(
    () => lines.reduce((sum, l) => sum + (l.price || 0) * (l.qty || 0), 0),
    [lines]
  )

  function addProduct(p: Product) {
    setLines(prev => {
      const ix = prev.findIndex(l => l.id === p.id)
      if (ix >= 0) {
        const copy = [...prev]
        copy[ix] = { ...copy[ix], qty: copy[ix].qty + 1 }
        return copy
      }
      return [...prev, {
        id: p.id,
        title: p.title,
        sku: p.sku,
        price: p.price ?? 0,
        qty: 1,
        stock: p.stock
      }]
    })
  }

  function setQty(id: string, qty: number) {
    setLines(prev => prev.map(l => l.id === id ? { ...l, qty: Math.max(0, Math.round(qty || 0)) } : l))
  }

  function setPrice(id: string, price: number) {
    setLines(prev => prev.map(l => l.id === id ? { ...l, price: Math.max(0, Math.round(price || 0)) } : l))
  }

  function removeLine(id: string) {
    setLines(prev => prev.filter(l => l.id !== id))
  }

  async function handleCreate() {
    if (!customer.name.trim()) {
      (window as any).lbToast?.('Angi kundenavn')
      return
    }
    if (lines.length === 0) {
      (window as any).lbToast?.('Legg til minst én vare')
      return
    }
    try {
      setBusy(true)
      const out = await apiCreateOrder({ customer, lines, notes })
      (window as any).lbToast?.('Ordre opprettet')
      // Naviger til ordredetalj hvis API returnerer id
      const id = out?.id ?? out?._id ?? out?.orderId
      if (id) location.assign(`/admin/orders/${id}`)
    } catch (e) {
      console.error(e)
      ;(window as any).lbToast?.('Klarte ikke å opprette ordre')
    } finally {
      setBusy(false)
    }
  }

  return (
    <AdminPage
      title="Opprett ordre"
      actions={
        <div className="flex items-center gap-2">
          <button
            disabled={busy}
            onClick={handleCreate}
            className="px-3 py-1.5 rounded bg-neutral-900 text-white disabled:opacity-50"
          >
            Lagre ordre
          </button>
        </div>
      }
    >
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-4">
        {/* VENSTRE: Kunde + notat */}
        <div className="md:col-span-1 space-y-4">
          <div className="bg-white rounded border p-4">
            <div className="font-medium mb-3">Kunde</div>
            <label className="block text-sm mb-1">Navn</label>
            <input
              value={customer.name}
              onChange={e => setCustomer(c => ({ ...c, name: e.target.value }))}
              placeholder="Kundenavn"
              className="w-full border rounded px-2 py-1.5"
            />
            <label className="block text-sm mt-3 mb-1">E-post</label>
            <input
              value={customer.email ?? ''}
              onChange={e => setCustomer(c => ({ ...c, email: e.target.value }))}
              placeholder="kunde@eksempel.no"
              className="w-full border rounded px-2 py-1.5"
            />
          </div>

          <div className="bg-white rounded border p-4">
            <div className="font-medium mb-3">Notat</div>
            <textarea
              value={notes}
              onChange={e => setNotes(e.target.value)}
              placeholder="Internt notat…"
              className="w-full border rounded px-2 py-2 h-28"
            />
          </div>

          <div className="bg-white rounded border p-4">
            <div className="flex items-center justify-between">
              <div className="font-medium">Totalt</div>
              <div className="font-semibold">{formatCurrency(total)}</div>
            </div>
          </div>
        </div>

        {/* MIDTEN: Produktsøk */}
        <div className="md:col-span-1">
          <div className="bg-white rounded border p-4">
            <div className="font-medium mb-3">Søk etter produkter</div>
            <ProductSearch
              placeholder="Søk tittel, SKU…"
              onFetch={searchProducts}
              onError={setSearchError}
              onPick={addProduct}
            />
            {searchError && (
              <div className="text-sm text-red-600 mt-2">{searchError}</div>
            )}
          </div>
        </div>

        {/* HØYRE: Linjer */}
        <div className="md:col-span-1">
          <div className="bg-white rounded border p-4">
            <div className="font-medium mb-3">Linjer</div>

            {lines.length === 0 && (
              <div className="text-sm text-neutral-500">Ingen varer lagt til ennå.</div>
            )}

            {lines.length > 0 && (
              <div className="space-y-3">
                {lines.map(l => (
                  <div key={l.id} className="border rounded p-2">
                    <div className="flex items-start justify-between gap-2">
                      <div>
                        <div className="font-medium">{l.title}</div>
                        <div className="text-xs text-neutral-500">
                          {l.sku ? `SKU: ${l.sku}` : '—'}{typeof l.stock === 'number' ? ` • På lager: ${l.stock}` : ''}
                        </div>
                      </div>
                      <button
                        onClick={() => removeLine(l.id)}
                        className="text-sm text-red-600 hover:underline"
                      >
                        Fjern
                      </button>
                    </div>

                    <div className="grid grid-cols-3 gap-2 mt-2">
                      <div>
                        <label className="block text-xs text-neutral-500 mb-1">Antall</label>
                        <input
                          type="number"
                          min={0}
                          value={l.qty}
                          onChange={e => setQty(l.id, Number(e.target.value))}
                          className="w-full border rounded px-2 py-1.5"
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-neutral-500 mb-1">Pris</label>
                        <input
                          type="number"
                          min={0}
                          value={l.price}
                          onChange={e => setPrice(l.id, Number(e.target.value))}
                          className="w-full border rounded px-2 py-1.5"
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-neutral-500 mb-1">Sum</label>
                        <div className="h-[38px] flex items-center font-medium">
                          {formatCurrency(l.price * l.qty)}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </AdminPage>
  )
}
