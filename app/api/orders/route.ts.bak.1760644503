import { NextResponse } from 'next/server'

/**
 * Minimal Magento client (GET only) – bruker admin token fra miljø.
 */
const M2_BASE = process.env.MAGENTO_BASE_URL || process.env.M2_BASE_URL
const M2_TOKEN = process.env.MAGENTO_ADMIN_TOKEN || process.env.M2_ADMIN_TOKEN

async function m2Get<T>(path: string): Promise<T> {
  if (!M2_BASE || !M2_TOKEN) {
    throw new Error('missing env MAGENTO_BASE_URL/MAGENTO_ADMIN_TOKEN')
  }
  const url = `${M2_BASE.replace(/\/+$/,'')}/${path.replace(/^\/+/,'')}`
  const res = await fetch(url, { headers: { Authorization: `Bearer ${M2_TOKEN}` }, cache: 'no-store' })
  if (!res.ok) {
    const txt = await res.text().catch(()=>'')
    throw new Error(`Magento GET ${url} failed: ${res.status} ${txt}`)
  }
  return await res.json()
}

/**
 * Normaliserer Magento orders → { total, items }
 * (Vi sender rå items videre – UI kjenner feltene increment_id, status, osv.)
 */
function normalizeOrders(m: any) {
  const total = m?.total_count ?? 0
  const items = Array.isArray(m?.items) ? m.items : []
  return { total, items }
}

/**
 * GET /api/orders
 * Proxy til Magento (V1/orders) m/ pagination og enkel q (søker i increment_id).
 */
export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url)
    const page = Math.max(1, Number(searchParams.get('page') ?? '1') || 1)
    const size = Math.max(1, Number(searchParams.get('size') ?? '25') || 25)
    const q = (searchParams.get('q') || '').trim()

    const params: string[] = [
      `searchCriteria[currentPage]=${page}`,
      `searchCriteria[pageSize]=${size}`,
      `searchCriteria[sortOrders][0][field]=created_at`,
      `searchCriteria[sortOrders][0][direction]=DESC`,
    ]
    if (q) {
      // enkel filter på increment_id
      params.push(`searchCriteria[filter_groups][0][filters][0][field]=increment_id`)
      params.push(`searchCriteria[filter_groups][0][filters][0][value]=%25${encodeURIComponent(q)}%25`)
      params.push(`searchCriteria[filter_groups][0][filters][0][condition_type]=like`)
    }
    const path = `V1/orders?` + params.join('&')
    const raw = await m2Get<any>(path)
    const out = normalizeOrders(raw)
    return NextResponse.json(out, { status: 200 })
  } catch (err: any) {
    console.error('[GET /api/orders] 500', err?.stack || err)
    return NextResponse.json({ error: 'Internal error', detail: String(err?.message || err) }, { status: 500 })
  }
}

/**
 * POST /api/orders
 * Robust: validerer, forsøker Magento (kan implementeres), faller tilbake til lokal stub og svarer 201.
 */
export async function POST(req: Request) {
  const t0 = Date.now()
  try {
    const body = await req.json().catch(() => null)
    if (!body || typeof body !== 'object') {
      return NextResponse.json({ error: 'Invalid JSON body' }, { status: 400 })
    }

    const { customer, lines, notes } = body as {
      customer?: any
      lines?: any[]
      notes?: string
    }

    if (!Array.isArray(lines) || lines.length === 0) {
      return NextResponse.json({ error: 'lines[] is required' }, { status: 400 })
    }

    const normLines = lines.map((l: any, i: number) => ({
      sku: l?.sku ?? null,
      productId: l?.productId ?? null,
      name: String(l?.name ?? ''),
      qty: Number(l?.qty ?? 1) || 1,
      price: Number(l?.price ?? 0) || 0,
      rowTotal: (Number(l?.qty ?? 1) || 1) * (Number(l?.price ?? 0) || 0),
      i,
    }))

    // --- Her kan du koble på faktisk Magento-ordre (quote → order) ---
    // Hvis du vil skru PÅ ekte opprettelse: sett MAGENTO_CREATE_ORDERS=1 og implementer createMagentoOrder().
    if (process.env.MAGENTO_CREATE_ORDERS === '1') {
      try {
        const created = await createMagentoOrder({ customer, lines: normLines, notes })
        return NextResponse.json(created, { status: 201 })
      } catch (e: any) {
        console.error('Magento create failed:', e?.stack || e)
        // fall-through til stub
      }
    }

    // --- Fallback: lokal stub order slik at UI ikke stopper ---
    const id = `ORD-${Date.now()}`
    const payload = {
      id,
      increment_id: id,
      status: 'new',
      created_at: new Date().toISOString(),
      customer: customer ?? null,
      lines: normLines,
      notes: notes ?? null,
      elapsed_ms: Date.now() - t0,
      source: 'local-stub',
    }
    return NextResponse.json(payload, { status: 201 })
  } catch (err: any) {
    console.error('[POST /api/orders] 500', err?.stack || err)
    return NextResponse.json({ error: 'Internal error', detail: String(err?.message || err) }, { status: 500 })
  }
}

/**
 * Placeholder – implementer faktisk M2 ordreopprettelse her (quote, add items, set addresses, payment, placeOrder).
 * Returner et objekt med id/increment_id osv. ved suksess.
 */
async function createMagentoOrder(_args: { customer: any, lines: any[], notes?: string }) {
  // TODO: implementer full Magento flyt
  throw new Error('createMagentoOrder not implemented')
}
