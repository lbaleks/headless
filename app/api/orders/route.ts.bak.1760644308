import { NextResponse } from 'next/server'
import { m2Get, buildSearchCriteria, mapOrder } from '@/lib/m2fetch'

export async function GET(req: Request) {
  const url = new URL(req.url)
  const page = Number(url.searchParams.get('page') || '1')
  const size = Number(url.searchParams.get('size') || '25')
  const q    = url.searchParams.get('q') || undefined
  const sort = url.searchParams.get('sort') || 'created_at:desc'

  // Magento Orders: vi kan ikke fritekstsøke på tvers i én call,
  // men vi lar q mappe til increment_id like OR customer_email like.
  const pageSafe = Math.max(1, page)
  const sizeSafe = Math.max(1, Math.min(200, size))

  const params = new URLSearchParams()
  params.set('searchCriteria[currentPage]', String(pageSafe))
  params.set('searchCriteria[pageSize]', String(sizeSafe))

  if (sort) {
    const [field, dirRaw] = String(sort).split(':')
    const direction = (dirRaw || 'desc').toUpperCase() === 'ASC' ? 'ASC' : 'DESC'
    params.set('searchCriteria[sortOrders][0][field]', field)
    params.set('searchCriteria[sortOrders][0][direction]', direction)
  }

  if (q && q.trim()) {
    const qq = q.trim()
    params.set('searchCriteria[filter_groups][0][filters][0][field]', 'increment_id')
    params.set('searchCriteria[filter_groups][0][filters][0][value]', `%${qq}%`)
    params.set('searchCriteria[filter_groups][0][filters][0][condition_type]', 'like')

    params.set('searchCriteria[filter_groups][1][filters][0][field]', 'customer_email')
    params.set('searchCriteria[filter_groups][1][filters][0][value]', `%${qq}%`)
    params.set('searchCriteria[filter_groups][1][filters][0][condition_type]', 'like')
  }

  const data = await m2Get<any>(`V1/orders?${params.toString()}`)
  const items = (data.items || []).map(mapOrder)
  const total = Number(data.total_count || data.totalCount || items.length)

  return NextResponse.json({ page: pageSafe, size: sizeSafe, total, items })
}

// --- Added by installer: POST handler to unblock UI ---
export async function POST(req: Request) {
  try {
    const body = await req.json().catch(() => ({}))
    const id = `ORD-${Date.now()}`
    return NextResponse.json({
      id,
      ok: true,
      received: body ?? null,
    }, { status: 201 })
  } catch (e:any) {
    return NextResponse.json({ error: e?.message || 'invalid payload' }, { status: 400 })
  }
}
