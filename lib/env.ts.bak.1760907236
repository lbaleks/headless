type MagentoConfig = {
  rawBase: string
  baseUrl: string
  token?: string | null
  adminUser?: string | null
  adminPass?: string | null
}
function ensureRestBase(u?: string | null) {
  if (!u) return ''
  let x = u.replace(/\/+$/, '')
  if (!/\/rest$/i.test(x)) x = x + '/rest'
  return x
}
export async function getMagentoConfig(): Promise<MagentoConfig> {
  const env = process.env
  let rawBase = ensureRestBase(env.MAGENTO_BASE_URL || env.MAGENTO_URL || '')
  const baseUrl = rawBase ? `${rawBase}/V1` : ''
  const token = env.MAGENTO_TOKEN || null
  const adminUser = env.MAGENTO_ADMIN_USERNAME || null
  const adminPass = env.MAGENTO_ADMIN_PASSWORD || null
  return { rawBase, baseUrl, token, adminUser, adminPass }
}
export async function getAdminToken(baseUrl: string, user?: string|null, pass?: string|null) {
  if (!baseUrl || !user || !pass) return null
  const url = baseUrl.replace(/\/V1$/,'') + '/V1/integration/admin/token'
  const r = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type':'application/json' },
    body: JSON.stringify({ username: user, password: pass }),
    cache: 'no-store',
  })
  if (!r.ok) return null
  const txt = await r.text()
  // Magento returnerer en JSON-string som allerede er `"token"`
  try { return JSON.parse(txt) as string } catch { return txt.replace(/^"+|"+$/g,'') }
}
